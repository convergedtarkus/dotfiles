# Setting for https://github.com/golangci/golangci-lint
run:
  # include test files or not, default is true
  tests: true

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true


# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    check-blank: true
  exhaustive:
    # check switch statements in generated files also
    check-generated: false
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    default-signifies-exhaustive: true # Not perfect, but generally how the setup works.
  gosimple:
    # Sxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    checks: ["all"]
  govet:
    # report about shadowed variables
    check-shadowing: true
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
   max-func-lines: 5
  unused:
    # Mark all struct fields that have been written to as used.
    field-writes-are-uses: false
    # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
    post-statements-are-reads: false 
    # Mark all exported fields as used.
    exported-fields-are-used: true 
    # Mark all function parameters as used.
    parameters-are-used: true
    # Mark all local variables as used.
    local-variables-are-used: false
    # Mark all identifiers inside generated files as used.
    generated-is-used: true 

linters:
  enable:
    # Disallow non-ascii in identifers.
    - asciicheck

    # Close HTTP response bodies.
    - bodyclose
    
    # Code duplicate detection.
    - dupl
    
    # Check for two durations multipled.
    - durationcheck

    # Looks for checked errors (default).
    - errcheck

    # Checks enum switch statements for completion.
    - exhaustive

    # Checks for pointers to enclosing loop variables. Like scopelint.
    - exportloopref

    # Find forced type assertions.
    - forcetypeassert

    # Finds places for constants.
    - goconst

    # Lots of aggressive lint opinions.
    - gocritic

    # Avoid todos and alike etc.
    - godox

    # Go formatting with simplification.
    - gofmt

    # Better gofmt (no simplfy though).
    - goimports
    
    # Checks for security issues.
    - gosec

    # Linter to help simply code (default).
    - gosimple

    # Reports suspicious contructs in go code (default).
    - govet

    # Reports assigments that are not used (default).
    - ineffassign

    # Finds initial zero length slices.
    - makezero

    # Check for common misspellings.
    - misspell

    # Find long functions with naked returns.
    - nakedret

    # Checks for not returning errors up higher.
    - nilerr

    # Find HTTP with Context.
    - noctx

    # Checks for bad nolint directives.
    - nolintlint

    # Preallocate slices.
    - prealloc

    # Avoid shadowing go identifiers.
    - predeclared
    
    # New golint.
    - revive

    # Forces rows error to be checks.
    - rowserrcheck

    # Close sql stuff.
    - sqlclosecheck

    # Go vet on steroids (default).
    - staticcheck

    # Replacement for golint.
    - stylecheck
    
    # Handles bad t.Parallel in tests.
    - tparallel

    # Type checks go code (default).
    - typecheck

    # Avoid unneeded type conversions.
    - unconvert

    # Find unused function parameters.
    - unparam

    # Checks for unused go code (default).
    - unused

    # Finds wasted assignments. Like ineffassign.
    - wastedassign

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    # Exclude the shadow check for err as that tends to be very noisy and 
    # is generally on purpose or not a concern.
    - 'shadow: declaration of "err" shadows declaration'

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Removes the checks for using deprecations and missing package comments.
    - linters:
        - staticcheck
      text: "SA1019:"

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
