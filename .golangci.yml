# Setting for https://github.com/golangci/golangci-lint
run:
  # include test files or not, default is true
  tests: true

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true


# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false
  govet:
    # report about shadowed variables
    check-shadowing: true
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true


linters:
  enable:
    #- bodyclose # don't use http much
    #- deadcode # enabled by default
    #- depguard # varies too much to help
    #- dupl # TODO Worth a try, noisy?
    #- errcheck # enabled by default
    #- funlen # TODO Worth trying, noisy?
    #- gochecknoglobals # Pretty common, noisy
    #- gochecknoinits # TODO Try? Safety is nice
    #- goconst # TODO Worth a shot, noisy?
    #- gocritic # TODO Would like to try. Need to config a lot I fear
    #- gocyclo # TODO Existing code will get flagged, maybe try?
    #- godox # Not always an issue
    - gofmt
    - golint
    - goimports
    #- gosec # This is covered in other ways
    #- gosimple # enabled by default
    #- govet # enabled by default
    #- ineffassign # enabled by default
    #- interfacer # Generally done for a reason
    #- lll # Going to be noisy
    #- maligned # Too noisy and unique setup invalidates
    - misspell
    #- nakedret # Generally don't use naked returns anyway
    - prealloc
    - scopelint
    #- staticcheck # enabled by default
    #- structcheck # enabled by default
    - stylecheck
    #- typecheck # enabled by default
    #- unused # enabled by default
    #- varcheck # enabled by default
    - unconvert
    - unparam


issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    # Exclude the shadow check for err as that tends to be very noisy and 
    # is generally on purpose or not a concern.
    - 'shadow: declaration of "err" shadows declaration'

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Removes the checks for using deprecations and missing package comments.
    - linters:
        - staticcheck
      text: "SA1019:"
    - path: _test\.go
      linters:
        - scopelint # Lots of false positives for table tests, see https://github.com/kyoh86/scopelint

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
