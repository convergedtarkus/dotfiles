#!/usr/bin/env bash
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# Do not do anything for merges or squashes or appends (SHA1 != "")
if [[ -n "$SHA1" || "$COMMIT_SOURCE" == "merge" || "$COMMIT_SOURCE" == "squash" ]]; then
	exit 0
fi

if [[ ! -f "$MYDOTFILES/bash/scripts/parseTicket.bash" ]]; then
	exit 0
fi

# Branch name finding is a copy of gBranch from my dotfiles.
# Get the current branch name.
branchName=$(git rev-parse --abbrev-ref HEAD)

if [[ "$branchName" == "HEAD" ]]; then
	# During a rebase, a different approach is needed to get the branch name.
	# Taken from https://stackoverflow.com/a/59115583.
	for location in rebase-merge rebase-apply; do
		path=$(git rev-parse --git-path ${location})
		if test -d "${path}"; then
			revision=$(<"${path}"/head-name)
			branchName=${revision##refs/heads/}
		fi
	done
fi

# Check if there is already a ticket in the commit message to avoid adding another one.
ticketLine=$(grep -v '^#\|^$' "$COMMIT_MSG_FILE" | tail -n 1)
existingTicket=$("$MYDOTFILES/bash/scripts/parseTicket.bash" "$ticketLine")
if [[ -n "$existingTicket" ]]; then
	exit 0
fi

parsedTicket=$("$MYDOTFILES/bash/scripts/parseTicket.bash" "$branchName")
if [[ -n "$parsedTicket" ]]; then
	if [[ "$COMMIT_SOURCE" == "message" ]]; then
		# Append parsed ticket after the -m message.
		printf "%s\n\n%s" "$(cat "$COMMIT_MSG_FILE")" "$parsedTicket" >"$COMMIT_MSG_FILE"
	else
		# Leave a blank line at the start and the parsed ticket on the next line.
		printf "\n\n%s%s" "$parsedTicket" "$(cat "$COMMIT_MSG_FILE")" >"$COMMIT_MSG_FILE"
	fi
fi
